name: Deploy Application

on:
  push:
    branches:
      - '**'  # This will match any branch
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region to deploy to (optional)'
        required: false
        type: string
        default: ''

env:
  AWS_REGION: ${{ inputs.region || vars.AWS_REGION }}
  TERRAFORM_BACKEND_BUCKET: ${{ vars.TERRAFORM_BACKEND_BUCKET }}
  TERRAFORM_BACKEND_KMS_KEY: ${{ vars.TERRAFORM_BACKEND_KMS_KEY }}
  TERRAFORM_BACKEND_DYNAMODB_TABLE: ${{ vars.TERRAFORM_BACKEND_DYNAMODB_TABLE }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.ref, 'refs/heads/fix/') && !startsWith(github.ref, 'refs/heads/feature/') }}
    outputs:
      frontend_url: ${{ steps.terraform-output.outputs.frontend_url }}
      api_url: ${{ steps.terraform-output.outputs.api_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build:backend

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.4

      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init \
            -backend-config="bucket=${{ env.TERRAFORM_BACKEND_BUCKET }}" \
            -backend-config="key=${{ github.repository }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="kms_key_id=${{ env.TERRAFORM_BACKEND_KMS_KEY }}" \
            -backend-config="dynamodb_table=${{ env.TERRAFORM_BACKEND_DYNAMODB_TABLE }}"

      - name: Select/Create Terraform Workspace
        run: |
          cd infrastructure/terraform
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          terraform workspace select $BRANCH_NAME || terraform workspace new $BRANCH_NAME

      - name: Terraform Apply
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve -var="region=${{ env.AWS_REGION }}"

      - name: Get Terraform outputs
        id: terraform-output
        run: |
          cd infrastructure/terraform
          terraform output frontend_url
          terraform output -raw frontend_url
          FRONTEND_URL=$(terraform output -raw frontend_url)
          API_URL=$(terraform output -raw api_url)
          echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "api_url=${API_URL}" >> $GITHUB_OUTPUT
          echo "Frontend URL: ${FRONTEND_URL}"
          echo "API URL: ${API_URL}"

      - name: Build frontend
        run: npm run build

      - name: Get S3 bucket name
        id: s3-bucket
        run: |
          cd infrastructure/terraform
          BUCKET_NAME=$(terraform output -raw frontend_bucket_name)
          echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "S3 Bucket: ${BUCKET_NAME}"

      - name: Upload frontend to S3
        run: |
          aws s3 sync build/ s3://${{ steps.s3-bucket.outputs.bucket_name }} \
            --delete \
            --cache-control "max-age=31536000,public" \
            --exclude "index.html" \
            --exclude "*.json"
          aws s3 cp build/index.html s3://${{ steps.s3-bucket.outputs.bucket_name }}/index.html \
            --cache-control "no-cache,no-store,must-revalidate" \
            --content-type "text/html; charset=utf-8"
          aws s3 cp build/manifest.json s3://${{ steps.s3-bucket.outputs.bucket_name }}/manifest.json \
            --cache-control "no-cache,no-store,must-revalidate" \
            --content-type "application/json"

  smoke-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.ref, 'refs/heads/fix/') && !startsWith(github.ref, 'refs/heads/feature/') }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd tests/selenium
          npm ci

      - name: Run Selenium tests
        run: |
          cd tests/selenium
          npm test
        env:
          APP_URL: ${{ needs.deploy.outputs.frontend_url }}
          API_URL: ${{ needs.deploy.outputs.api_url }}
